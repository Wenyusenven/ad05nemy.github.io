<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[shellcode笔记(6)]]></title>
    <url>%2F2019%2F04%2F12%2Fshellcode-6%2F</url>
    <content type="text"><![CDATA[通过得到的kernel32.dll基址查找GetProcAddres地址 得到了kernel32的基地址，接下来哟调用其它函数就需要得到GetProcAddress函数的地址，刚好这个函数就存在于kernel32当中大概流程如下: 从kernel32.dll的加载基址处找到PE头(kernel32本身也是一个PE文件) 从PE头处找到函数导出表的指针 从函数导出表找到存储导出函数偏移地址(RVA)的列表 //AddressOfFunction 从函数导出表找到存储导出函数函数名的列表 //AddressOfNames 从函数名称列表中找到对应的序号 //AddressOfNameOrdinals 通过序号在RVA得到函数地址 用C语言实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758FARPROC getProcAddress(HMODULE hModuleBase)&#123;FARPROC pRet = NULL; //存储返回地址PIMAGE_DOS_HEADER lpDosHeader; //PE头PIMAGE_NT_HEADERS32 lpNtHeaders; PIMAGE_EXPORT_DIRECTORY lpExports; //导出表PWORD lpwOrd;PDWORD lpdwFunName; //存储函数名PDWORD lpdwFunAddr; //存储RVADWORD dwLoop; //循环计数lpDosHeader = (PIMAGE_DOS_HEADER)hModuleBase; //获得DOS头的基址lpNtHeaders = (PIMAGE_NT_HEADERS)((DWORD)hModuleBase + lpDosHeader-&gt;e_lfanew); //函数导出表的指针if (!lpNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size) //得到函数导出表的大小&#123; return pRet;&#125;if (!lpNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress) //得到RVA列表&#123; return pRet;&#125;lpExports = (PIMAGE_EXPORT_DIRECTORY)((DWORD)hModuleBase + (DWORD)lpNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress); //得到函数导出表if (!lpExports-&gt;NumberOfNames) //得到函数名列表&#123; return pRet;&#125;lpdwFunName = (PDWORD)((DWORD)hModuleBase + (DWORD)lpExports-&gt;AddressOfNames); //赋值函数名列表lpwOrd = (PWORD)((DWORD)hModuleBase + (DWORD)lpExports-&gt;AddressOfNameOrdinals); //赋值序号表lpdwFunAddr = (PDWORD) ((DWORD)hModuleBase + (DWORD)lpExports-&gt;AddressOfFunctions); //复制RVA表for (dwLoop = 0; dwLoop &lt;= lpExports-&gt;NumberOfNames - 1; dwLoop++)&#123; char *pFunName = (char*)(lpdwFunName[dwLoop] + (DWORD)hModuleBase); //循环查找GetProcAddress函数名的地址 if (pFunName[0] == &apos;G&apos; &amp;&amp; pFunName[1] == &apos;e&apos; &amp;&amp; pFunName[2] == &apos;t&apos; &amp;&amp; pFunName[3] == &apos;P&apos; &amp;&amp; pFunName[4] == &apos;r&apos; &amp;&amp; pFunName[5] == &apos;o&apos; &amp;&amp; pFunName[6] == &apos;c&apos; &amp;&amp; pFunName[7] == &apos;A&apos; &amp;&amp; pFunName[8] == &apos;d&apos; &amp;&amp; pFunName[9] == &apos;d&apos; &amp;&amp; pFunName[10] == &apos;r&apos; &amp;&amp; pFunName[11] == &apos;e&apos; &amp;&amp; pFunName[12] == &apos;s&apos; &amp;&amp; pFunName[13] == &apos;s&apos; ) &#123; pRet = (FARPROC)(lpdwFunAddr[lpwOrd[dwLoop]] + (DWORD)hModuleBase); //找到之后返回地址到pRet break; &#125;&#125; return pRet;&#125; 最后写一个程序来测试一下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;stdio.h&gt;#include &lt;windows.h&gt;FARPROC getProcAddress(HMODULE hModuleBase);DWORD getKernel32();int main()&#123; typedef FARPROC(WINAPI *FN_GetProcAddress) ( __in HMODULE hModule, __in LPCSTR lpProcName ); FN_GetProcAddress fn_GetProcAddress = (FN_GetProcAddress)getProcAddress((HMODULE)getKernel32()); printf(&quot;0x%x\n&quot;,fn_GetProcAddress); printf(&quot;0x%x&quot;,GetProcAddress(LoadLibraryA(&quot;kernel32.dll&quot;),&quot;GetProcAddress&quot;)); system(&quot;pause&quot;); return 0;&#125;_declspec(naked) DWORD getKernel32()&#123; _asm &#123; mov eax, fs:[030h]//读取PEB进程环境块 mov eax, [eax + 0ch]//跳转到PEB环境块的0xc处读取Ldr指针 mov eax, [eax + 14h]//跳转到0x14偏移处读取InMemoryOrderModuleList字段 mov eax, [eax] mov eax, [eax] mov eax, [eax + 10h] ret &#125;&#125;FARPROC getProcAddress(HMODULE hModuleBase)&#123;FARPROC pRet = NULL;PIMAGE_DOS_HEADER lpDosHeader;PIMAGE_NT_HEADERS32 lpNtHeaders;PIMAGE_EXPORT_DIRECTORY lpExports;PWORD lpwOrd;PDWORD lpdwFunName;PDWORD lpdwFunAddr;DWORD dwLoop;lpDosHeader = (PIMAGE_DOS_HEADER)hModuleBase;lpNtHeaders = (PIMAGE_NT_HEADERS)((DWORD)hModuleBase + lpDosHeader-&gt;e_lfanew);if (!lpNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size)&#123; return pRet;&#125;if (!lpNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress)&#123; return pRet;&#125;lpExports = (PIMAGE_EXPORT_DIRECTORY)((DWORD)hModuleBase + (DWORD)lpNtHeaders-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);if (!lpExports-&gt;NumberOfNames)&#123; return pRet;&#125;lpdwFunName = (PDWORD)((DWORD)hModuleBase + (DWORD)lpExports-&gt;AddressOfNames);lpwOrd = (PWORD)((DWORD)hModuleBase + (DWORD)lpExports-&gt;AddressOfNameOrdinals);lpdwFunAddr = (PDWORD) ((DWORD)hModuleBase + (DWORD)lpExports-&gt;AddressOfFunctions);for (dwLoop = 0; dwLoop &lt;= lpExports-&gt;NumberOfNames - 1; dwLoop++)&#123; char *pFunName = (char*)(lpdwFunName[dwLoop] + (DWORD)hModuleBase); if (pFunName[0] == &apos;G&apos; &amp;&amp; pFunName[1] == &apos;e&apos; &amp;&amp; pFunName[2] == &apos;t&apos; &amp;&amp; pFunName[3] == &apos;P&apos; &amp;&amp; pFunName[4] == &apos;r&apos; &amp;&amp; pFunName[5] == &apos;o&apos; &amp;&amp; pFunName[6] == &apos;c&apos; &amp;&amp; pFunName[7] == &apos;A&apos; &amp;&amp; pFunName[8] == &apos;d&apos; &amp;&amp; pFunName[9] == &apos;d&apos; &amp;&amp; pFunName[10] == &apos;r&apos; &amp;&amp; pFunName[11] == &apos;e&apos; &amp;&amp; pFunName[12] == &apos;s&apos; &amp;&amp; pFunName[13] == &apos;s&apos; ) &#123; pRet = (FARPROC)(lpdwFunAddr[lpwOrd[dwLoop]] + (DWORD)hModuleBase); break; &#125;&#125; return pRet;&#125; 运行一下，看看通过动态获取的GetProcAddress函数地址和编译器直接调用的GetProcAddress函数地址有没有区别可以看到地址是一样的，说明动态函数调用是成功的]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>shellcode</tag>
        <tag>溢出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shellcode笔记（5）]]></title>
    <url>%2F2019%2F04%2F12%2Fshellcode-5%2F</url>
    <content type="text"><![CDATA[继续写shellcode第二部分获取kernel32.dll基址这是处理了一部分的代码1234567891011121314151617#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int entrymain()&#123; char szuser32[] = &#123;&apos;u&apos;,&apos;s&apos;,&apos;e&apos;,&apos;r&apos;,&apos;3&apos;,&apos;2&apos;,&apos;.&apos;,&apos;d&apos;,&apos;l&apos;,&apos;l&apos;,0&#125;; char szmessage[] = &#123;&apos;M&apos;,&apos;e&apos;,&apos;s&apos;,&apos;s&apos;,&apos;a&apos;,&apos;g&apos;,&apos;e&apos;,&apos;B&apos;,&apos;o&apos;,&apos;x&apos;,&apos;A&apos;,0&#125;; typedef int(WINAPI *FN_MessageBoxA)( __in_opt HWND hWnd, __in_opt LPCSTR lpText, __in_opt LPCSTR lpCaption, __in UINT uType); FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)GetProcAddress(LoadLibraryA(szuser32),szmessage); char he[] = &#123;&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;,0&#125;; char tip[] = &#123;&apos;t&apos;,&apos;i&apos;,&apos;p&apos;,&apos;s&apos;,0&#125;; fn_MessageBoxA(NULL,he,tip,MB_OK); return 0;&#125; 可以看到我用LoadLibraryA和GetProcAddress函数获取了MessaeBoxA的函数地址,但是LoadLibraryA和GetProcAddress同样是一个函数,同样需要动态调用,你会发现，LoadLibraryA已经是加载DLL的函数，本身需要动态调用，那么我们如何实现LoadLibraryA动态调用呢,LoadLibraryA函数存在于kernel32.dll当中，首先需要获取kernel32.dll的地址目前常用的方法是通过TEB/PEB结构获取kernel32.dll的基址了解下什么是TEB/PEB结构 TEB(Thread Environment Block，线程环境块)线程环境块中存放着进程中所有线程的各种信息 当exe文件载入内存时,在NT内核系统中fs:[0]指向了TEB结构，TEB(Thread Environment Block)位于用户地址空间，进程中的每个线程都有自己的一个TEB从图中我们可以看到NtCurrentTeb() 函数所返回的结构体指针即为 fs:[0x18] 的值，里面的值即为TEB的结构体指针，对比数据窗口即可发现fs:[0]的值即为TEB的起始地址。用windbg随意加载一个文件，用dt命令查看TEB结构体1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341350:001&gt; dt nt!_TEBntdll!_TEB +0x000 NtTib : _NT_TIB +0x01c EnvironmentPointer : Ptr32 Void +0x020 ClientId : _CLIENT_ID +0x028 ActiveRpcHandle : Ptr32 Void +0x02c ThreadLocalStoragePointer : Ptr32 Void +0x030 ProcessEnvironmentBlock : Ptr32 _PEB +0x034 LastErrorValue : Uint4B +0x038 CountOfOwnedCriticalSections : Uint4B +0x03c CsrClientThread : Ptr32 Void +0x040 Win32ThreadInfo : Ptr32 Void +0x044 User32Reserved : [26] Uint4B +0x0ac UserReserved : [5] Uint4B +0x0c0 WOW32Reserved : Ptr32 Void +0x0c4 CurrentLocale : Uint4B +0x0c8 FpSoftwareStatusRegister : Uint4B +0x0cc SystemReserved1 : [54] Ptr32 Void +0x1a4 ExceptionCode : Int4B +0x1a8 ActivationContextStack : _ACTIVATION_CONTEXT_STACK +0x1bc SpareBytes1 : [24] UChar +0x1d4 GdiTebBatch : _GDI_TEB_BATCH +0x6b4 RealClientId : _CLIENT_ID +0x6bc GdiCachedProcessHandle : Ptr32 Void +0x6c0 GdiClientPID : Uint4B +0x6c4 GdiClientTID : Uint4B +0x6c8 GdiThreadLocalInfo : Ptr32 Void +0x6cc Win32ClientInfo : [62] Uint4B +0x7c4 glDispatchTable : [233] Ptr32 Void +0xb68 glReserved1 : [29] Uint4B +0xbdc glReserved2 : Ptr32 Void +0xbe0 glSectionInfo : Ptr32 Void +0xbe4 glSection : Ptr32 Void +0xbe8 glTable : Ptr32 Void +0xbec glCurrentRC : Ptr32 Void +0xbf0 glContext : Ptr32 Void +0xbf4 LastStatusValue : Uint4B +0xbf8 StaticUnicodeString : _UNICODE_STRING +0xc00 StaticUnicodeBuffer : [261] Uint2B +0xe0c DeallocationStack : Ptr32 Void +0xe10 TlsSlots : [64] Ptr32 Void +0xf10 TlsLinks : _LIST_ENTRY +0xf18 Vdm : Ptr32 Void +0xf1c ReservedForNtRpc : Ptr32 Void +0xf20 DbgSsReserved : [2] Ptr32 Void +0xf28 HardErrorsAreDisabled : Uint4B +0xf2c Instrumentation : [16] Ptr32 Void +0xf6c WinSockData : Ptr32 Void +0xf70 GdiBatchCount : Uint4B +0xf74 InDbgPrint : UChar +0xf75 FreeStackOnTermination : UChar +0xf76 HasFiberData : UChar +0xf77 IdealProcessor : UChar +0xf78 Spare3 : Uint4B +0xf7c ReservedForPerf : Ptr32 Void +0xf80 ReservedForOle : Ptr32 Void +0xf84 WaitingOnLoaderLock : Uint4B +0xf88 Wx86Thread : _Wx86ThreadState +0xf94 TlsExpansionSlots : Ptr32 Ptr32 Void +0xf98 ImpersonationLocale : Uint4B +0xf9c IsImpersonating : Uint4B +0xfa0 NlsCache : Ptr32 Void +0xfa4 pShimData : Ptr32 Void +0xfa8 HeapVirtualAffinity : Uint4B +0xfac CurrentTransactionHandle : Ptr32 Void +0xfb0 ActiveFrame : Ptr32 _TEB_ACTIVE_FRAME +0xfb4 SafeThunkCall : UChar +0xfb5 BooleanSpare : [3] UChar 重点关注位于偏移+0x030处指向PEB结构体的指针,再查看这个结构体1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321330:001&gt; dt nt!_PEBntdll!_PEB +0x000 InheritedAddressSpace : UChar +0x001 ReadImageFileExecOptions : UChar +0x002 BeingDebugged : UChar +0x003 SpareBool : UChar +0x004 Mutant : Ptr32 Void +0x008 ImageBaseAddress : Ptr32 Void +0x00c Ldr : Ptr32 _PEB_LDR_DATA +0x010 ProcessParameters : Ptr32 _RTL_USER_PROCESS_PARAMETERS +0x014 SubSystemData : Ptr32 Void +0x018 ProcessHeap : Ptr32 Void +0x01c FastPebLock : Ptr32 _RTL_CRITICAL_SECTION +0x020 FastPebLockRoutine : Ptr32 Void +0x024 FastPebUnlockRoutine : Ptr32 Void +0x028 EnvironmentUpdateCount : Uint4B +0x02c KernelCallbackTable : Ptr32 Void +0x030 SystemReserved : [1] Uint4B +0x034 AtlThunkSListPtr32 : Uint4B +0x038 FreeList : Ptr32 _PEB_FREE_BLOCK +0x03c TlsExpansionCounter : Uint4B +0x040 TlsBitmap : Ptr32 Void +0x044 TlsBitmapBits : [2] Uint4B +0x04c ReadOnlySharedMemoryBase : Ptr32 Void +0x050 ReadOnlySharedMemoryHeap : Ptr32 Void +0x054 ReadOnlyStaticServerData : Ptr32 Ptr32 Void +0x058 AnsiCodePageData : Ptr32 Void +0x05c OemCodePageData : Ptr32 Void +0x060 UnicodeCaseTableData : Ptr32 Void +0x064 NumberOfProcessors : Uint4B +0x068 NtGlobalFlag : Uint4B +0x070 CriticalSectionTimeout : _LARGE_INTEGER +0x078 HeapSegmentReserve : Uint4B +0x07c HeapSegmentCommit : Uint4B +0x080 HeapDeCommitTotalFreeThreshold : Uint4B +0x084 HeapDeCommitFreeBlockThreshold : Uint4B +0x088 NumberOfHeaps : Uint4B +0x08c MaximumNumberOfHeaps : Uint4B +0x090 ProcessHeaps : Ptr32 Ptr32 Void +0x094 GdiSharedHandleTable : Ptr32 Void +0x098 ProcessStarterHelper : Ptr32 Void +0x09c GdiDCAttributeList : Uint4B +0x0a0 LoaderLock : Ptr32 Void +0x0a4 OSMajorVersion : Uint4B +0x0a8 OSMinorVersion : Uint4B +0x0ac OSBuildNumber : Uint2B +0x0ae OSCSDVersion : Uint2B +0x0b0 OSPlatformId : Uint4B +0x0b4 ImageSubsystem : Uint4B +0x0b8 ImageSubsystemMajorVersion : Uint4B +0x0bc ImageSubsystemMinorVersion : Uint4B +0x0c0 ImageProcessAffinityMask : Uint4B +0x0c4 GdiHandleBuffer : [34] Uint4B +0x14c PostProcessInitRoutine : Ptr32 void +0x150 TlsExpansionBitmap : Ptr32 Void +0x154 TlsExpansionBitmapBits : [32] Uint4B +0x1d4 SessionId : Uint4B +0x1d8 AppCompatFlags : _ULARGE_INTEGER +0x1e0 AppCompatFlagsUser : _ULARGE_INTEGER +0x1e8 pShimData : Ptr32 Void +0x1ec AppCompatInfo : Ptr32 Void +0x1f0 CSDVersion : _UNICODE_STRING +0x1f8 ActivationContextData : Ptr32 Void +0x1fc ProcessAssemblyStorageMap : Ptr32 Void +0x200 SystemDefaultActivationContextData : Ptr32 Void +0x204 SystemAssemblyStorageMap : Ptr32 Void +0x208 MinimumStackCommit : Uint4B 重点在于偏移+0x00c处指向_PEB_LDR_DATA结构的指针,查看这个结构体12345678910111213141516170:001&gt; dt nt!_PEB_LDR_DATAntdll!_PEB_LDR_DATA +0x000 Length : Uint4B +0x004 Initialized : UChar +0x008 SsHandle : Ptr32 Void +0x00c InLoadOrderModuleList : _LIST_ENTRY +0x014 InMemoryOrderModuleList : _LIST_ENTRY +0x01c InInitializationOrderModuleList : _LIST_ENTRY +0x024 EntryInProgress : Ptr32 Void 这里需要注意三个结构体:12345+0x00c InLoadOrderModuleList : _LIST_ENTRY+0x014 InMemoryOrderModuleList : _LIST_ENTRY+0x01c InInitializationOrderModuleList : _LIST_ENTRY 这三个都是_LIST_ENTRY的结构体，都是进程当前已加载模块的链表，只是按照不同的方式排序,这个结构体成员如下:12345670:001&gt; dt nt!_LIST_ENTRYntdll!_LIST_ENTRY +0x000 Flink : Ptr32 _LIST_ENTRY +0x004 Blink : Ptr32 _LIST_ENTRY _LIST_ENTRY结构体是双向链表的头结点结构，两个指针分别指向了链表的第一个结点和最后一个节点，这里的双向链表的每一个节点都是一个指向LDR_DATA_TABLE_ENTRY结构体的指针，看一下这个结构的描述:1234567891011121314151617181920212223242526272829303132333435363738390:001&gt; dt nt!_LDR_DATA_TABLE_ENTRYntdll!_LDR_DATA_TABLE_ENTRY +0x000 InLoadOrderLinks : _LIST_ENTRY +0x008 InMemoryOrderLinks : _LIST_ENTRY +0x010 InInitializationOrderLinks : _LIST_ENTRY +0x018 DllBase : Ptr32 Void +0x01c EntryPoint : Ptr32 Void +0x020 SizeOfImage : Uint4B +0x024 FullDllName : _UNICODE_STRING +0x02c BaseDllName : _UNICODE_STRING +0x034 Flags : Uint4B +0x038 LoadCount : Uint2B +0x03a TlsIndex : Uint2B +0x03c HashLinks : _LIST_ENTRY +0x03c SectionPointer : Ptr32 Void +0x040 CheckSum : Uint4B +0x044 TimeDateStamp : Uint4B +0x044 LoadedImports : Ptr32 Void +0x048 EntryPointActivationContext : Ptr32 Void +0x04c PatchInformation : Ptr32 Void 可以看到+0x0018处为DLLBase（DLL基址）偏移8字节，即可得到dll的加载基址流程图(画的略丑) 用汇编代码得到基址:12345678910_asm&#123; mov eax,fs:[030h] //得到peb结构体的地址 mov eax,[ebx + 0ch] //得到Ldr结构体的地址 mov eax,[ebx + 014c] //得到ldr.InMemoryOrderModuleList.Flink 第二个模块，当前进程 mov eax,[ebx] //得到第一个模块地址 程序本身 mov eax,[ebx] //得到第二个模块地址 ntdll.dll mov eax,[ebx+0x10] //得到第三个模块地址（kernel32模块的dllbase) ret&#125; DLLBase偏移位于0x018第二个模块偏移0x008所以第三个模块偏移于0x10]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>shellcode</tag>
        <tag>溢出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shellcode笔记(4)]]></title>
    <url>%2F2019%2F04%2F12%2Fshellcode-4%2F</url>
    <content type="text"><![CDATA[开始编写shellcode新建一个C语言控制台项目，首先把GS选项关闭写一段简单的代码12345678#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int entrymain()&#123; MessageBoxA(NULL,&quot;hello&quot;,&quot;tips&quot;,MB_OK); return 0;&#125; 代码只是弹出了一个消息框，并没有什么作用，现在用shellcode的写法改编首先要杜绝字符串的直接引用123456789#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int entrymain()&#123; char he[] = &#123;&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;,0&#125;; char tip[] = &#123;&apos;t&apos;,&apos;i&apos;,&apos;p&apos;,&apos;s&apos;,0&#125;; MessageBoxA(NULL,he,tip,MB_OK); return 0;&#125; 然后是函数的动态调用首先需要重新定义该函数，右键转到定义,复制函数原型用typedef定义一个指针12345typedef int(WINAPI *FN_MessageBoxA)( __in_opt HWND hWnd, __in_opt LPCSTR lpText, __in_opt LPCSTR lpCaption, __in UINT uType); 然后用LoadLibraryA函数获取user32.dll的地址,再用GetProcAddress函数获取MessageBoxA在user32.dll中的地址,再把函数地址赋值给指针同时，user32.dll和MessageBoxA字符串也需要做处理最终代码:1234567891011121314151617#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int entrymain()&#123; char szuser32[] = &#123;&apos;u&apos;,&apos;s&apos;,&apos;e&apos;,&apos;r&apos;,&apos;3&apos;,&apos;2&apos;,&apos;.&apos;,&apos;d&apos;,&apos;l&apos;,&apos;l&apos;,0&#125;; char szmessage[] = &#123;&apos;M&apos;,&apos;e&apos;,&apos;s&apos;,&apos;s&apos;,&apos;a&apos;,&apos;g&apos;,&apos;e&apos;,&apos;B&apos;,&apos;o&apos;,&apos;x&apos;,&apos;A&apos;,0&#125;; typedef int(WINAPI *FN_MessageBoxA)( __in_opt HWND hWnd, __in_opt LPCSTR lpText, __in_opt LPCSTR lpCaption, __in UINT uType); FN_MessageBoxA fn_MessageBoxA = (FN_MessageBoxA)GetProcAddress(LoadLibraryA(szuser32),szmessage); char he[] = &#123;&apos;h&apos;,&apos;e&apos;,&apos;l&apos;,&apos;l&apos;,&apos;o&apos;,0&#125;; char tip[] = &#123;&apos;t&apos;,&apos;i&apos;,&apos;p&apos;,&apos;s&apos;,0&#125;; fn_MessageBoxA(NULL,he,tip,MB_OK); return 0;&#125; 编译运行一下运行成功]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>shellcode</tag>
        <tag>溢出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shellcode笔记(3)]]></title>
    <url>%2F2019%2F04%2F12%2Fshellcode-3%2F</url>
    <content type="text"><![CDATA[shellcode的编写原则ShelCode编写原则(规则更贴切)因为字符串直接赋值在内存中是一个绝对地址，存在于其它内存空间，shllcode在内存中运行时调用别的内存空间的地址可能会引起崩溃 杜绝双引号字符串的直接引用如:char buffer[] = “123456”;可用:char buffer[] = {‘1’,’2’,’3’,’4’,’5’,’6’,0};或者:12345678910111213char *buffer;_asm &#123; call _buffer _EMIT &apos;1&apos; :表占位，写入 _EMIT &apos;2&apos; _EMIT &apos;3&apos; _EMIT &apos;4&apos; _EMIT &apos;5&apos; _EMIT &apos;6&apos; _EMIT 0 :结束标志 _buffer: pop buffer &#125; 避免函数直接调用 因为不同的操作系统函数的地址也不一样，在编写shellcode时所调用的函数都是基于当前的操作系统和编译器所直接调用的函数，在其它操作系统平台上地址就会变化，所以需要动态调用函数 避免全局变量,避免使用static关键字 原因同1 所使用的每个函数都需先加载动态链接库 函数都存在于DLL(动态链接库)当中，在动态调用函数时都需要在内存中先加载动态链接库才能调用函数,如MessageBox函数存在于user32.dll中]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>shellcode</tag>
        <tag>溢出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shellcode笔记(2)]]></title>
    <url>%2F2019%2F04%2F11%2Fshellcode-2%2F</url>
    <content type="text"><![CDATA[实际编写一个例子:123456789#include &quot;stdio.h&quot;#include &quot;string.h&quot;int main()&#123; char buffer[8]; gets(buffer); printf(&quot;%s&quot;,buffer); return 0;&#125; 可以看到我在程序中定义了一个缓冲区长度为8的buffer,把输入的数据放在buffer里面，然后打印出来,用OD附加看看输入16个a，长度远远大于我定义的8个字节看看会发生什么字符a的ascii码即是61,可以看到，程序暂停了，并报出了访问违规再看看EIP寄存器变成了61616161EIP寄存器存放了下一跳指令的地址，61616161不是一个地址，也不是一个指令，导致了程序的异常终止再看堆栈窗口的数据四个地址全部61占满,我输入了16个a,刚好16个字节的地址大小，此处因为我输入了超出缓存区大小的数据，溢出覆盖了EIP寄存器，如果我输入的是构造好的shellcode,那么我就能执行任意代码，甚至获取一个系统shell]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>shellcode</tag>
        <tag>溢出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shellcode笔记(1)]]></title>
    <url>%2F2019%2F04%2F07%2Fshellcode-1%2F</url>
    <content type="text"><![CDATA[shellcode shellcode是一段用于利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。shellcode常常使用机器语言编写。 可在暂存器eip溢出后，塞入一段可让CPU执行的shellcode机器码，让电脑可以执行攻击者的任意指令。来源：百度百科 缓冲区溢出 计算机程序一般都会使用到一些内存，这些内存或是程序内部使用，或是存放用户的输入数据，这样的内存一般称作缓冲区。溢出是指盛放的东西超出容器容量而溢出来了，在计算机程序中，就是数据使用到了被分配内存空间之外的内存空间。而缓冲区溢出，简单的说就是计算机对接收的输入数据没有进行有效的检测（理想的情况是程序检查数据长度并不允许输入超过缓冲区长度的字符），向缓冲区内填充数据时超过了缓冲区本身的容量，而导致数据溢出到被分配空间之外的内存空间，使得溢出的数据覆盖了其他内存空间的数据。来源:百度百科 概述: 缓冲区溢出又叫堆栈溢出（还有许许多的称呼），这是计算机程序难以避免的漏洞，除非有新的设计方式将程序运行的堆栈设计取代。溢出的目的是重写程序的运行堆栈，使调用返回堆栈包含一个跳向预设好的程序的程序（代码），这个程序通常称为shellcode，通过这个shellcode就能获得如期的shell，更有可能获得root(权限)。 然后是windows内存结构，堆和栈 堆主要用来分配内存，栈用来存储函数之间的调用关系和顺序 PE文件 PE文件是windows下文件所遵循的一种数据格式常见的exe,dll都是PE文件,PE文件把文件分成几个数据节,不同的资源存放在不同的节中 .text节，由编译器产生,存放二进制的机器代码 .data节，初始化的数据块，存放全局变量，静态变量等 .idata节，可执行文件使用的动态链接库等外来函数的信息 .rsrc节,存放程序的资源，如图标，菜单. 然后是PE文件装载在栈内存的过程 ESP:栈顶指针寄存器(所有栈的栈顶)EBP:栈底指针寄存器(最上面一个栈的栈底)EIP:指向下一跳指令的寄存器 然后是函数调用的大概流程: 参数入栈：将参数从右到左压栈 返回地址入栈:将下一条指令的地址压栈 代码区跳转:从当前代码区跳转到被调用函数的入口处 栈帧调整 函数调用时的实现]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>shellcode</tag>
        <tag>溢出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逆向笔记(2)]]></title>
    <url>%2F2019%2F04%2F04%2Freverse2%2F</url>
    <content type="text"><![CDATA[结合上篇继续jnz改成jz即可修改程序判断逻辑首先ZF是一个标志位，用来临时记录运算结果,若运算结果为真，则标志位ZF=1,否则ZF=0 JNZ：运算结果不为0则跳转(检查标志位ZF是否等于0,不为0则跳转)JZ：运算结果为0则跳转(检查标志位ZF是否等于1,不为1则跳转) 首先在jnz处下个断点，再运行程序可以看到此时Z标志位为0,把标志位修改为1,再运行程序再次提示login success!为什么改成jz照样能判断成功,因为正常运算为假，所以ZF=0，正常逻辑为jnz判断ZF此时=0，根据jnz不为1则跳转,所以跳转到password error提示语处,反之修改为jz为0则不跳转，顺序执行到login sucess!]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逆向笔记(1)]]></title>
    <url>%2F2019%2F04%2F01%2Freverse%2F</url>
    <content type="text"><![CDATA[用C语言粗略写了个验证字符串的代码如下:123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void main()&#123;int shuz;scanf(&quot;please input password%d&quot;,&amp;shuz);if (shuz == 123)&#123; printf(&quot;login sucess!&quot;); system(&quot;pause&quot;);&#125;else&#123; printf(&quot;Password error!&quot;); system(&quot;pause&quot;);&#125;&#125; 可以看到程序判断输入是否为123如果是，则提示Login Success!不是则提示Password error!退出程序打开IDA加载程序 清楚的看到程序的逻辑流程jnz地址处则是判断逻辑的开始,空格跳转到汇编代码查看jnz的内存地址为 用OD附加进程看看,查找所有字符串 清楚的看到请输入密码的提示语，双击跳转到汇编语句所在的位置 看到提示成功和密码错误的提示语,结合在IDA找到的跳转指令内存地址 004A1019,加上OD内存位置的jnz可以得出00EA4019即是我们在IDA看到jnz跳转指令，为什么00401019变成了00EA1019,十进制01234换算十六进制分别是ABCDE，所以004A1019变成了00EA1019 把jnz改成jz重新运行程序 可以看到，随意输入的字符串也能判断成功!]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
</search>
